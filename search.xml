<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2022/03/25/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="@标题@"></a>@标题@</h2><pre><code># 一级标题
## 二级标题
</code></pre>
<ul>
<li></li>
<li></li>
<li></li>
</ul>
<p>以此类推</p>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="@列表@"></a>@列表@</h2><ol>
<li>内容一</li>
<li>内容二</li>
<li>内容三</li>
</ol>
<ul>
<li>abcd</li>
<li>abcd</li>
<li>abcd</li>
</ul>
<p>等多种组合嵌套</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="@代码@"></a>@代码@</h2><p>表示方法如下：<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220325221110.png"><br><strong>示例</strong><br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs 语言">代码<br></code></pre></td></tr></table></figure></p>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="@表格@"></a>@表格@</h2><p>表示方法如下：<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220325222336.png"><br><strong>示例</strong></p>
<table>
<thead>
<tr>
<th align="left">列1</th>
<th align="center">列2</th>
<th align="right">列3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a</td>
<td align="center">b</td>
<td align="right">c</td>
</tr>
<tr>
<td align="left">d</td>
<td align="center">e</td>
<td align="right">f</td>
</tr>
</tbody></table>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="@图片@"></a>@图片@</h2><p>表示方法如下：<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220325223138.png"><br><em><strong>示例</strong></em><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20190716/7375d1ae6f264ac6806a7020e04896bc.jpeg" alt="百度logo"></p>
<hr>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="@超链接@"></a>@超链接@</h2><p>表示方法如下：<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220325225300.png"><br><em><strong>示例</strong></em></p>
<p><a href="https://www.bilibili.com/video/BV1LE411k7Gw?spm_id_from=333.999.0.0">笔记参考</a></p>
<hr>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2022/04/03/2022-04-03/</url>
    <content><![CDATA[<h2 id="limux命令"><a href="#limux命令" class="headerlink" title="limux命令"></a>limux命令</h2><h3 id="96-96"><a href="#96-96" class="headerlink" title="&#96;&#96;"></a>&#96;&#96;</h3><p>linux中将&#96;&#96;(反引号)里的内容作为系统命令来执行。</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p>
<h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p><em><strong>cat</strong></em>  倒过来写的，作用是将文件全部内容从尾到头反向连续输出到标准输出(屏幕)上。</p>
<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>Linux pwd（英文全拼：print work directory） 命令用于显示工作目录。</p>
<ul>
<li>执行 pwd 指令可立刻得知您目前所在的工作目录的绝对路径名称。</li>
</ul>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>Linux ls（英文全拼：list files）命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>Linux id命令用于显示用户的ID，以及所属群组的ID。</p>
<ul>
<li>id会显示用户以及所属群组的实际与有效ID。若两个ID相同，则仅显示实际ID。若仅指定用户名称，则显示目前用户的ID。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>理解NAT模式和桥接模式</title>
    <url>/2022/04/06/2022-04-06/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实验室电脑搭建靶机过程中，面临两个网络配置的选择：</p>
<ul>
<li><em><strong>NAT模式</strong></em></li>
<li><em><strong>桥接模式</strong></em></li>
</ul>
<span id="more"></span>

<h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a><strong>NAT模式</strong></h3><p>所谓nat模式，就是虚拟系统会通过宿主机的网络来访问外网，而这里的宿主机相当于有两个网卡，一个是真实网卡，一个是虚拟网卡，真实网卡相当于链接了现实世界的真实路由器，而宿主机的虚拟网卡，相当于链接了一个可以认为是虚拟交换机（<font color="red">这个虚拟交换机他同时链接了虚拟系统（linux）和宿主机</font>）,这个时候的虚拟网络想访问外网，就必须通过宿主机的IP地址，而外面看来也确实是宿主机的IP地址（<font color="red">实则是虚拟机访问的！！</font>），完全看不到虚拟网络局域的内部形式，而这个时候linux和宿主机和虚拟交换机形成一个网段，宿主机和真实路由形成一个网段！！</p>
<p><img src="/../images/NAT%E6%A8%A1%E5%BC%8F.png" alt="NAT模式"></p>
<p>优点:不需要自己来手动分配IP地址和子网掩码，只要宿主机能访问网络，他就能访问网络。（<font color="red">注意，虚拟机可以ping宿主机，宿主机ping不了虚拟机</font>）</p>
<hr>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a><strong>桥接模式</strong></h3><p>这个相当于在一个局域网内创立了一个单独的主机，他可以访问这个局域网内的所有的主机，但是需要手动来配置IP地址，子网掩码，并且他是和真实主机在同一个网段（<font color="red">nat是两个网段</font>），这个模式里，虚拟机和宿主机可以互相ping通。</p>
<p><img src="/../images/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="NAT模式"></p>
<h4 id="桥接模式设置"><a href="#桥接模式设置" class="headerlink" title="桥接模式设置"></a>桥接模式设置</h4><p>打开vmware虚拟机，打开在选项栏的“编辑”下的“虚拟网络编辑器”，点击右下角更改设置。选择VMnet0（<font color="red">桥接模式</font>）,接着在下面VMnet信息设置中选择桥接模式，并选择已桥接至一个可用网卡，点击确定，设置成功！</p>
<p><em><strong>参考</strong></em></p>
<blockquote>
<p><a href="https://www.cnblogs.com/Booker808-java/p/7822763.html">https://www.cnblogs.com/Booker808-java/p/7822763.html</a><br><a href="https://blog.csdn.net/qq_43455948/article/details/99960284">https://blog.csdn.net/qq_43455948/article/details/99960284</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Virtual Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF</title>
    <url>/2022/04/03/csrf/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介绍CSRF相关内容</p>
<span id="more"></span>

<h2 id="CSRF-跨站请求伪造-概述"><a href="#CSRF-跨站请求伪造-概述" class="headerlink" title="CSRF(跨站请求伪造)概述"></a>CSRF(跨站请求伪造)概述</h2><p>Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。</p>
<p><img src="/../images/86d6277f9e2f0708efe75721e024b899a901f235.webp" alt="CSRF"></p>
<h2 id="CSRF与XSS的区别"><a href="#CSRF与XSS的区别" class="headerlink" title="CSRF与XSS的区别"></a>CSRF与XSS的区别</h2><p>CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。</p>
<h2 id="如何防止CSRF攻击"><a href="#如何防止CSRF攻击" class="headerlink" title="如何防止CSRF攻击"></a>如何防止CSRF攻击</h2><ul>
<li>对敏感信息的操作增加安全的token；</li>
<li>对敏感信息的操作增加安全的验证码；</li>
<li>对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>crsf</tag>
      </tags>
  </entry>
  <entry>
    <title>shell编程备份数据库</title>
    <url>/2022/06/28/shell%E7%BC%96%E7%A8%8B%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><em><strong>需求</strong></em></li>
</ul>
<ol>
<li>每天凌晨2：10备份数据库 *** 到&#x2F;data&#x2F;backup&#x2F;db</li>
<li>备份开始和备份结束能够给出相应的提示信息。</li>
<li>备份后的文件要求以备份时间为文件名，并打包成.tar.gz的形式，比如：2022-06-28_154450.tar.gz</li>
<li>在备份的同时，检查是否有10天前备份的数据库文件，如果有就将其删除。</li>
</ol>
<span id="more"></span>

<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#完成数据库的定时备份</span><br><span class="hljs-comment">#路径的备份</span><br>BACKUP=/data/backup/db<br><span class="hljs-comment">#当前的时间作为文件名</span><br>DATATIME=$(<span class="hljs-built_in">date</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$DATATIME</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;===========开始备份=============&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==========备份的路径是 <span class="hljs-variable">$BACKUP</span>/<span class="hljs-variable">$DATETIME</span>.tar.gz&quot;</span><br><br><span class="hljs-comment">#主机</span><br>HOST=localhost<br><span class="hljs-comment">#用户名</span><br>DB_USER=root<br><span class="hljs-comment">#密码</span><br>DB_PWD=root<br><span class="hljs-comment">#备份数据库名</span><br>DATABASE=数据库名<br><span class="hljs-comment">#创建备份的路径</span><br><span class="hljs-comment">#如果备份的路径文件夹存在，就使用，否则就创建</span><br>[ ! -d <span class="hljs-string">&quot;BACKUP/<span class="hljs-variable">$DATETIME</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$BACKUP</span>/<span class="hljs-variable">$DATETIME</span>&quot;</span><br><span class="hljs-comment">#执行mysql的备份数据库指令</span><br>mysqldump -u<span class="hljs-variable">$&#123;DB_USER&#125;</span> -p<span class="hljs-variable">$&#123;DB_PWD&#125;</span> --host=<span class="hljs-variable">$HOST</span> <span class="hljs-variable">$DATABASE</span> | gzip &gt; <span class="hljs-variable">$BACKUP</span>/<span class="hljs-variable">$DATETIME</span>/<span class="hljs-variable">$DATETIME</span>.sql.gz<br><span class="hljs-comment">#打包备份文件</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$BACKUP</span><br>tar -zcvf <span class="hljs-variable">$DATETIME</span>.tar.gz <span class="hljs-variable">$DATETIME</span><br><span class="hljs-comment">#删除临时目录</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$BACKUP</span>/<span class="hljs-variable">$DATETIME</span><br><br><span class="hljs-comment">#删除十天前的备份文件</span><br>find <span class="hljs-variable">$BACKUP</span> -mtime +10 -name <span class="hljs-string">&quot;*. tar. gz&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -rf &#123;&#125; \;<br></code></pre></td></tr></table></figure>
</code></pre>
<h2 id="在crontab中的配置"><a href="#在crontab中的配置" class="headerlink" title="在crontab中的配置"></a>在crontab中的配置</h2><pre><code><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">2</span> * * * /<span class="hljs-keyword">usr</span>/sbin/mysql_db_backup.sh<br></code></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客搭建成功啦！</title>
    <url>/2022/03/25/hello-world/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>动态</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入——注释相关</title>
    <url>/2022/07/04/sql%E6%B3%A8%E5%85%A5%E6%B3%A8%E9%87%8A%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL注入中，注释#、 –+、 –%20、 %23</p>
<span id="more"></span>
<ol>
<li><h1 id="和-–-（有个空格）表示注释，可以使它们后面的语句不被执行。在url中，如果是get请求-记住是get请求，也就是我们在浏览器中输入的url-，解释执行的时候，url中-号是用来指导浏览器动作的，对服务器端无用。所以，HTTP请求中不包括-，因此使用-闭合无法注释，会报错；而使用–-（有个空格），在传输过程中空格会被忽略，同样导致无法注释，所以在get请求传参注入时才会使用–-的方式来闭合，因为-会被解释成空格。"><a href="#和-–-（有个空格）表示注释，可以使它们后面的语句不被执行。在url中，如果是get请求-记住是get请求，也就是我们在浏览器中输入的url-，解释执行的时候，url中-号是用来指导浏览器动作的，对服务器端无用。所以，HTTP请求中不包括-，因此使用-闭合无法注释，会报错；而使用–-（有个空格），在传输过程中空格会被忽略，同样导致无法注释，所以在get请求传参注入时才会使用–-的方式来闭合，因为-会被解释成空格。" class="headerlink" title="和 – （有个空格）表示注释，可以使它们后面的语句不被执行。在url中，如果是get请求**(记住是get请求，也就是我们在浏览器中输入的url)** ，解释执行的时候，url中#号是用来指导浏览器动作的，对服务器端无用。所以，HTTP请求中不包括#，因此使用#闭合无法注释，会报错；而使用– （有个空格），在传输过程中空格会被忽略，同样导致无法注释，所以在get请求传参注入时才会使用–+的方式来闭合，因为+会被解释成空格。"></a>和 – （有个空格）表示注释，可以使它们后面的语句不被执行。在url中，如果是get请求**(记住是get请求，也就是我们在浏览器中输入的url)** ，解释执行的时候，url中#号是用来指导浏览器动作的，对服务器端无用。所以，HTTP请求中不包括#，因此使用#闭合无法注释，会报错；而使用– （有个空格），在传输过程中空格会被忽略，同样导致无法注释，所以在get请求传参注入时才会使用–+的方式来闭合，因为+会被解释成空格。</h1></li>
<li>也可以使用–%20，把空格转换为urlencode编码格式，也不会报错。同理把#变成%23,也不报错。</li>
<li>如果是post请求，则可以直接使用#来进行闭合。常见的就是表单注入，如我们在后台登录框中进行注入。</li>
<li>为什么–后面必须要有空格，而#后面就不需要？<br>因为使用–注释时，需要使用空格，才能形成有效的sql语句，而#后面可以有空格，也可以没有，sql就是这么规定的，记住就行了。<br>因为不加空格，–直接和系统自动生成的单引号连接在了一起，会被认为是一个关键词，无法注释掉系统自动生成的单引号。</li>
</ol>
]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>MySQL注释符</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建过程中所碰到的问题</title>
    <url>/2022/03/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%89%80%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="node-ji安装时碰到的问题"><a href="#node-ji安装时碰到的问题" class="headerlink" title="node.ji安装时碰到的问题"></a>node.ji安装时碰到的问题</h2><p>不要点安装附加工具那个选项！</p>
<hr>
<h2 id="npm安装hexo时遇到的问题"><a href="#npm安装hexo时遇到的问题" class="headerlink" title="npm安装hexo时遇到的问题"></a>npm安装hexo时遇到的问题</h2><ol>
<li>人们遇到最多的是连接不成功的问题，换<strong>镜像</strong>下载就可以了。</li>
<li>我在安装过程中遇到的问题是：需要管理员权限才能安装，解决方法：<ul>
<li>在开始菜单下找到 Git Bash,右键以管理员身份运行。</li>
<li>然后切换目录到 Blog 的根目录下即可进行 hexo 的安装。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="切换-next-主题时遇到的问题"><a href="#切换-next-主题时遇到的问题" class="headerlink" title="切换 next 主题时遇到的问题"></a>切换 next 主题时遇到的问题</h2><p>按操作换为 next 主题后，页面出现乱码，解决办法：<br>hexo在5.0之后把 swig 给删除了需要自己手动安装:<br>    <figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs Markdown">npm i hexo-renderer-swig<br></code></pre></td></tr></table></figure></p>
<blockquote>
<p><a href="https://www.cnblogs.com/lanhualan/p/14588669.html">https://www.cnblogs.com/lanhualan/p/14588669.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>二次注入 二次注入</title>
    <url>/2022/04/13/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="二次注入原理"><a href="#二次注入原理" class="headerlink" title="二次注入原理"></a>二次注入原理</h2><ul>
<li>二次注入的原理，在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数在过滤后会添加 “\” 进行转义，但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。</li>
<li>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</li>
</ul>
<p><strong>可以用来</strong>(<font color="red">绕过转义注入和魔术引号</font>)</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code><figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">注册用户: insert xiaojian <span class="hljs-keyword">select</span>&#x27; <span class="hljs-built_in">union</span><br>过滤: xiaojian <span class="hljs-keyword">select</span>\&#x27; <span class="hljs-built_in">union</span><br>进入数据库: xiaojian <span class="hljs-keyword">select</span>&#x27; <span class="hljs-built_in">union</span><br>修改用户: <span class="hljs-keyword">update</span> xiaojian <span class="hljs-keyword">select</span>&#x27; <span class="hljs-built_in">union</span><br></code></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Sql Inject</tag>
      </tags>
  </entry>
</search>
